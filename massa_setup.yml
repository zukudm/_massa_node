- name: Install 
  vars_files: 
    - vars/vars.yml
  hosts: "{{ host }}"
  gather_facts: no
  become: yes    
  
  tasks:
    
      - name: Remove old container if exists
        community.docker.docker_container:
          name: "{{ container_name }}"
          state: absent

      - name: Remove an old volume if exists
        community.docker.docker_volume:
          name: "{{ volume_name }}"
          state: absent

      
          

      
      - name: Get latest info
        uri:
          url: "{{ massa_githubapi_url }}"
          return_content: true
        register: massa_info

      - name: Get version 
        set_fact: version="{{ massa_info.json.tag_name }}"

      - name: Get download url 
        set_fact: download_url="{{ massa_info.json.assets[0].browser_download_url}}"  

      - name: Get download url 
        set_fact: artifact_name="{{ massa_info.json.assets[0].name}}"  

      
      
      - name: Print latest checkout_version variable
        debug:
          msg: "{{ version }} {{ download_url }}"  


      - name: Create a docker network
        docker_network:
          name: "{{ network_name }}"

      - name: Get Dockerfile from URL
        get_url:
          url: "{{ massa_githubapi_url }}"
          dest: "./{{dockerfile}}"


      - name: Build image and with build args
        community.docker.docker_image:
          name: "{{ image_name }}"
          tag: "{{ version }}"
          state: present
          force_absent: true
          build:
            path: "./"
            dockerfile: "{{ dockerfile }}"
            args:
              ARTIFACT_LINK: "{{ download_url }}"
              ARTIFACT_BIN: "{{ artifact_name }}"
          source: build

      # - name: Start the container 
      #   community.docker.docker_container:
      #     name: "{{ container_name }}"
      #     image: "{{ image_name }}:{{ version }}"
      #     labels: 
      #       version: "{{ version }}"
      #     pull: false
      #     detach: yes
      #     restart_policy: unless-stopped
      #     networks: 
      #       - name: "{{ network_name }}"
      #     # volumes: 
      #     #   - "{{ volume_name }}:{{ container_mount_point }}"
      #     cpus: "{{ cpus }}"
      #     cpu_shares: "{{ cpu_shares }}"
      #     memory: "{{ memory }}"
      #     memory_reservation: "{{ memory_reservation }}"   
      #     command: ["/root/massa/massa-node/massa-node", "-p", "mypassword"]

     